variables:
  HATCH_INDEX_USER: $PYPI_USERNAME
  HATCH_INDEX_AUTH: $PYPI_PASSWORD
  HATCH_INDEX_REPO: $PYPI_URL
  SSH_PRIVATE_KEY: $SSH_PRIVATE_KEY
  DOCKER_NAMESPACE: docker/project/namespace
  DOCKER_PACKAGE_NAME: my-package
  CLUSTER_MODULE_NAME: mypackage

stages:
  - lint
  - test
  - publish
  - deploy

# select the autoscaled Gitlab runner
default:
  tags:
    - autoscaled

before_script:
  - python -m pip install --upgrade pip
  - python -m pip install hatch

lint:
  stage: lint
  script:
    - pip install pre-commit pyproject-flake8
    - pre-commit install
    - pre-commit run --all-files

test:
  stage: test
  parallel:
    matrix:
      - PYTHON_VERSION:
        - '3.9'
        - '3.10'
  image: python:${PYTHON_VERSION}
  script:
  - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
  - eval $(ssh-agent -s)
  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  # make sure Gitlab and Github are accessible such that libraires
  # can be installed directly from source
  - ssh-keyscan github.com >> ~/.ssh/known_hosts
  - ssh-keyscan gitlab.pasqal.com >> ~/.ssh/known_hosts
  - chmod 644 ~/.ssh/known_hosts
  - python -m hatch -v run pytest

publish:
  stage: publish
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - python -m hatch build
    - python -m hatch publish

# Remove the `.` to have the job below run and build & publish the docker image
.docker-publish:
  stage: publish
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - VERSION=`echo ${CI_COMMIT_TAG} | grep -Eo '[0-9]+\.[0-9]+\.[0-9]+'`
    - docker build --build-arg PYPI_USERNAME=${PYPI_USERNAME} --build-arg PYPI_PASSWORD=${PYPI_PASSWORD} -t pasqal/${DOCKER_PACKAGE_NAME}:${VERSION} .
    - docker tag pasqal/${DOCKER_PACKAGE_NAME}:${VERSION} ${DOCKER_REGISTRY}/${DOCKER_NAMESPACE}/${DOCKER_PACKAGE_NAME}:${VERSION}
    - docker tag pasqal/${DOCKER_PACKAGE_NAME}:${VERSION} ${DOCKER_REGISTRY}/${DOCKER_NAMESPACE}/${DOCKER_PACKAGE_NAME}:latest
    - docker login -u $PCS_HARBOR_USERNAME -p $PCS_HARBOR_PASSWORD $PCS_HARBOR_URL
    - docker push --all-tags ${DOCKER_REGISTRY}/${DOCKER_NAMESPACE}/${DOCKER_PACKAGE_NAME}
    - echo "VERSION=$VERSION" >> version.env
  artifacts:
    reports:
      dotenv: version.env

# Remove the `.` to have the job below run and deploy the library as a module on the DGX Cluster
# Requires `docker-publish` to run
.deploy-lib:
  stage: deploy
  rules:
    - if: $CI_COMMIT_TAG
  needs:
    - publish-docker
  trigger:
    project: pcs/dgx-connector
    strategy: depend
  variables:
    # Docker image
    QUANTUM_LIBRARY_IMAGE: $DOCKER_PACKAGE_NAME
    QUANTUM_LIBRARY_TAG: $VERSION
    DOCKER_NAMESPACE: $DOCKER_NAMESPACE
    # Module
    QUANTUM_LIBRARY_NAME: $CLUSTER_MODULE_NAME
    QUANTUM_LIBRARY_VERSION: $VERSION

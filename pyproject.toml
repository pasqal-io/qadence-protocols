[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "template_python"
description = "Pasqal quantum libraries template project in Python"
readme = "README.md"
version = "0.1.0"
requires-python = ">=3.8"
license = {text = "Proprietary"}
keywords = ["quantum"]
authors = [
  { name = "Mario Dagrada", email = "mario.dagrada@pasqal.com" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]

# always specify a version for each package
# to maintain consistency
dependencies = [
  "qucint>=0.3.0",
  "pulser>=0.10.0"
]

[tool.hatch.metadata]
allow-direct-references = true
allow-ambiguous-features = true

# add one or more extras in the dependencies
[project.optional-dependencies]
extras = [
  "pyqtorch @ git+https://git@github.com/pasqal-io/PyQ.git@v0.1.5dev",
  "matplotlib>=3.5.0"
]

# install libraries from the Pasqal quantum libraries private PyPi repository
# ask in the relevant code Slack channels if you do not have the credentials
# to access the PyPi repository
[tool.hatch.envs.default.env-vars]
PIP_EXTRA_INDEX_URL = "https://{env:PYPI_USERNAME}:{env:PYPI_PASSWORD}@gitlab.pasqal.com/api/v4/projects/190/packages/pypi/simple"

[project.urls]
Documentation = ""
Issues = "https://gitlab.pasqal.com/pqs/template-python-project/-/issues"
Source = "https://gitlab.pasqal.com/pqs/template-python-project"

[tool.hatch.envs.default]
features = ["extras"]
dependencies = [
  "pytest",
  "pytest-cov",
  "pytest-mypy",
  "pytest-xdist",
  "nbconvert",
  "ipykernel",
  "pre-commit",
  "flake8",
  "black",
  "isort"
]

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = """-vvv --cov-report=term-missing --cov-config=pyproject.toml --cov=template_python \
--cov=tests --mypy template_python --mypy tests"""
xfail_strict = true
filterwarnings = [
  "ignore:Call to deprecated create function FieldDescriptor",
  "ignore:Call to deprecated create function Descriptor",
  "ignore:Call to deprecated create function EnumDescriptor",
  "ignore:Call to deprecated create function EnumValueDescriptor",
  "ignore:Call to deprecated create function FileDescriptor",
  "ignore:Call to deprecated create function OneofDescriptor",
  "ignore:distutils Version classes are deprecated."
]

[tool.hatch.envs.docs]
detached = true
dependencies = [
  "mkdocs",
  "mkdocs-material",
  "mkdocstrings",
  "mkdocstrings-python",
  "mkdocs-section-index",
  "mkdocs-jupyter",
  "mkdocs-exclude",
  "markdown-exec",
  "jupyter_contrib_nbextensions"
]

[tool.hatch.envs.docs.scripts]
build = "mkdocs build --clean --strict"
serve = "mkdocs serve --dev-addr localhost:8000"

[[tool.hatch.envs.test.matrix]]
python = ["38", "39", "310", "311"]

[tool.coverage.run]
branch = true
parallel = true
# uncomment to omit any file from the
# coverage. Regexps can be used
# to select all files from a folder
#omit = [
#  "template_python/to_omit.py",
#]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[tool.flake8]
max-complexity = 18
max-line-length = 100
exclude = """
    .git,
    .venv,
"""
extend-ignore = """
    E266,
    E741,
    E742,
"""
per-file-ignores = """i
    __init__.py: F401
"""
ban-relative-imports = true

[tool.isort]
line_length = 100
combine_as_imports = true
balanced_wrapping = true
lines_after_imports = 2
include_trailing_comma = true
multi_line_output = 5

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
no_implicit_optional = false
ignore_missing_imports = true
